using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace reversi
{
    public partial class Reversi : Form
    {
        private bool hulp; //hulp aan of uit
        private int beurt; //welke beurt is het?
        private int VakjesX; 
        private int VakjesY;
        const int Leeg = 0; 
        const int Blauw = 1;
        const int Rood = 2;
        const int Legalezet = 2;
        public int[,] veld;
        public int Speleraanzet;
        public string StringSpelerAanZet => Speleraanzet == Rood ? "Rood" : "Blauw";
        const int Groottevakje = 32; //misschien moeten we andere grootte doen
        const int diameterCirkels = Groottevakje - 4;
        const int ZetBepalen = 0;
        const int Cirkelinsluiten = 1;
        private int RoodScore; //gebruiken in Scoreteller
        private int BlauwScore;
        private int Uitslag; //Voor als er geen zet meer gedaan kan worden
        private int pasTeller; //telt hoevaak er achter elkaar gepast is, als allebei passen is het spel klaaar


        public Reversi()
        {
            InitializeComponent();
            Startnieuwspel();
            
        }

        private void Startnieuwspel() //start nieuw spel
        {
            beurt = 1;
            hulp = false;
            VakjesX = (int)aantalX.Value;
            VakjesY = (int)aantalY.Value;
            veld = new int[VakjesX, VakjesY];
            panel1.Size = new Size(VakjesX * Groottevakje + 1, VakjesY * Groottevakje + 1);
            ClientSize = new Size(82, 175) + panel1.Size;
            if (Width < 380)
                Width = 380;
            panel1.Location = new Point(panel1.Width - panel1.Width + 68, panel1.Location.Y);
            if (panel1.Location.X < 168)
               panel1.Location = new Point(168, panel1.Location.Y);

            int StartX = VakjesX / 2;
            int StartY = VakjesY / 2;

            veld[StartX, StartY] = Blauw;
            veld[StartX - 1, StartY- 1] = Blauw;
            veld[StartX- 1, StartY] = Rood;
            veld[StartX, StartY- 1] = Rood;






        }
        private void panel1_Paint(object sender, PaintEventArgs pea)
        {
            Graphics gr = pea.Graphics;

            Pen zwart   = Pens.Black;
            Brush blauw = Brushes.RoyalBlue;
            Brush rood  = Brushes.OrangeRed;

            for (int x = 0; x < VakjesX; x++)
            {
                for (int y = 0; y < VakjesY; y++)
                {
                    gr.DrawRectangle(zwart, x * Groottevakje, y * Groottevakje, Groottevakje, Groottevakje);

                    switch (veld[x, y])
                    {
                        case Rood:
                            gr.FillEllipse(rood, x * Groottevakje + (Groottevakje - diameterCirkels) / 2,
                                y * Groottevakje + (Groottevakje - diameterCirkels) / 2, diameterCirkels, diameterCirkels);
                            break;
                        case Blauw:
                            gr.FillEllipse(blauw, x * Groottevakje + (Groottevakje - diameterCirkels) / 2,
                                y * Groottevakje + (Groottevakje - diameterCirkels) / 2, diameterCirkels, diameterCirkels);
                            break;
                        case Legalezet:
                            if (hulp)
                                gr.DrawEllipse(zwart, x * Groottevakje + Groottevakje / 4,
                                    y * Groottevakje + Groottevakje / 4, Groottevakje / 2, Groottevakje / 2);
                            break;
                    }
                }
            }

        }

        private void HelpButton_Click(object sender, EventArgs e) //help aan en uit zettetn
        {
            hulp = !hulp;
            panel1.Invalidate();
        }

        private void StartnieuwspelButton_click(object sender, EventArgs e) //Nieuwspel button
        {
            Startnieuwspel();
        }
   
     
        private void ScoreBlauw_Paint(object sender, PaintEventArgs pea)
        {

        }

        private void ScoreRood_Paint(object sender, PaintEventArgs pea)
        {

        }

        private void Aanzet_Paint (object sender, PaintEventArgs pea)
        {

        }

        private void NieuwZet()
        {
            for (int x = 0; x < VakjesX; x++)
            {
                for (int y = 0; y < VakjesY; y++)
                {
                    if (veld[x, y] == Leeg)
                        Algoritme(x, y, ZetBepalen);
                }
            }
        }

        private void Algoritme(int x, int y, int modus)
        {


        }
        private void Directie(int x, int y, int dx, int dy, int afstandTotRandX, int afstandTotRandY, int modus)
        {


        }
        private void WisZetten()
        {
            for (int x = 0; x < VakjesX; x++)
            {
                for (int y = 0; y < VakjesY; y++)
                {
                    if (veld[x, y] == Legalezet)
                        veld[x, y] = Leeg;
                }
            }
        

    }
        public void ScoreTeller()
        {

        }


    }
}
